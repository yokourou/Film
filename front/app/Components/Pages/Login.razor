@* @page "/login"
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<PageTitle>Login</PageTitle>

<div class="auth-container">
    <div class="auth-box">
        <h2>Login</h2>
        <form @onsubmit="HandleLogin">
            <div class="form-group">
                <label for="pseudo">Pseudo</label>
                <input id="pseudo" type="text" class="form-control" placeholder="Enter your username"
                       @bind="User.Pseudo" required />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input id="password" type="password" class="form-control" placeholder="Enter your password"
                       @bind="User.Password" required />
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
        </form>
        <p class="text-center mt-3">
            Don't have an account? <a href="/signup">Sign Up</a>
        </p>
    </div>
</div>

@code {
    private UserInfo User { get; set; } = new UserInfo();

    private async Task HandleLogin()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/auth/login", User);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                // Save token (example: in local storage or cookies)
                Navigation.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Login failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex.Message}");
        }
    }
}
<style>
    .auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: linear-gradient(to bottom, #6a11cb, #2575fc);
    color: #fff;
}

.auth-box {
    background: #fff;
    color: #444;
    width: 100%;
    max-width: 400px;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.auth-box h2 {
    margin-bottom: 20px;
    font-size: 24px;
    font-weight: bold;
}

.form-group {
    margin-bottom: 15px;
    text-align: left;
}

.form-control {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ddd;
}

.form-check-label {
    font-size: 14px;
}

.btn {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    transition: background 0.3s;
}

.btn:hover {
    background: linear-gradient(135deg, #2575fc, #6a11cb);
}

</style> *@

@page "/Login"
@using app.Components.Layout
@using Microsoft.AspNetCore.Components.Authorization; 
@using app.Models
@using app.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject UserServiceFront UserService
@inject AuthenticationStateProvider AuthStateProvider

@* <h3>Login</h3>
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Pseudo :</label>
        <InputText @bind-Value="loginModel.Pseudo" />
    </div>
    <div>
        <label>Mot de passe :</label>
        <InputText @bind-Value="loginModel.Password" Type="password" />
    </div>

    <button type="submit">Connexion</button>
</EditForm> *@
<link href="css/login.css" rel="stylesheet" />
    <script src="https://kit.fontawesome.com/5d72166fb5.js" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/boxicons/css/boxicons.min.css" rel="stylesheet">
 <div id="main-content" class="main-content">
        <div class="sec1">
            <div class="logo"><img src="/images/logo.png" width="500px"></div>
        </div>
        <div class="sec2">
            <div class="header">
                <ul>
                    <li>Help</li>
                    <li>About</li>
                </ul>
            </div>
            <div id="login-section" class="login">
                <div class="head1">LOGIN</div>
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="validation-summary" />
                    <div class="input">
                        <div class="input-box">
                            <InputText class="form-control" @bind-Value="loginModel.Pseudo" placeholder="User" />
                        </div>
                        <div class="input-box">
                            <InputText class="form-control" @bind-Value="loginModel.Password" Type="password" placeholder="Password" />
                        </div>
                    </div>
                    <div class="buttons">
                        <div class="fpass">
                            <a href="#">Forgot Password?</a>
                        </div>
                        <button type="submit">Login</button>
                    </div>
                </EditForm>
                <div class="register">
                    <p>Didn't have an account?</p>
                    <a href="/signup">Sign in</a>
                </div>
                <span>Or</span>
                <div class="link">
                    <a href="#">
                        <i class='bx bxl-google' style='color:#f5f5dc'></i>
                    </a>
                    <a href="#">
                        <i class='bx bxl-apple' style='color:#f5f5dc'></i>
                    </a>
                </div>
            </div>
        </div>
    </div>


@code{
    private UserInfo loginModel = new UserInfo();

    private async Task HandleLogin()
    {
        UserInfo loginModelInput = new UserInfo();
        loginModelInput.Pseudo=loginModel.Pseudo;
        loginModelInput.Password=loginModel.Password;
        Console.WriteLine("On est ici");
        var result = await UserService.LoginAsync(loginModelInput);
        Console.WriteLine("Result : ",result);
        if (result != null && result.Token !=null)
        {
            //await ((AuthProvider)AuthStateProvider).Login(result.User, result.Token); --Wiem
            //Use CustomAuthProvider
            await ((CustomStateAuthProvider)AuthStateProvider).MarkUserAsAuthenticated(result.Token);
            UserService.NavigateToHomeAndReload();
            
        }
        else
        {
            Console.WriteLine("Login échoué.");
        }
    }

}
<style>

/* Réinitialisation des styles globaux */
body {
  margin: 0;
  padding: 0;
  font-family: 'Arial', sans-serif;
  background-color: #f5f7fa; /* Couleur de fond claire et apaisante */
  color: #333; /* Couleur du texte */
}

/* Conteneur principal centré */
.login-container {
  max-width: 400px;
  margin: 100px auto; /* Centrage vertical et horizontal */
  padding: 20px;
  background: #fff; /* Fond blanc */
  border-radius: 12px; /* Coins arrondis */
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Ombre douce */
  text-align: center; /* Centrer le contenu */
}

/* Titre */
.login-container h3 {
  font-size: 1.8em;
  margin-bottom: 20px;
  color: #3b82f6; /* Bleu professionnel */
}

/* Formulaire */
.login-container form {
  display: flex;
  flex-direction: column;
}

/* Champs de saisie */
.login-container label {
  margin-bottom: 5px;
  font-weight: bold;
  font-size: 0.9em;
  color: #444;
}

.login-container input {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ddd; /* Bordure légère */
  border-radius: 8px; /* Coins arrondis */
  font-size: 1em;
  background-color: #f9f9f9;
}

.login-container input:focus {
  border-color: #0056b3; /* Couleur de la bordure au focus */
  outline: none;
  box-shadow: 0 0 5px rgba(0, 86, 179, 0.3); /* Légère lueur */
}

/* Bouton */
.login-container button {
  background-color: #3b82f6; /* Bleu professionnel */
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 12px;
  font-size: 1em;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.login-container button:hover {
  background-color: #2563eb; /* Couleur plus foncée au survol */
  transform: scale(1.03); /* Léger zoom */
}

.login-container button:active {
  transform: scale(1); /* Revenir à la taille initiale lors du clic */
}

/* Messages d'erreur ou de validation */
.validation-summary {
  margin-bottom: 10px;
  color: #d9534f; /* Rouge pour les erreurs */
  font-size: 0.9em;
}


</style>