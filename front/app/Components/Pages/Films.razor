@page "/films"
@using Microsoft.AspNetCore.Components.Authorization
@using app.Models
@using app.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject FilmService FilmService
@inject FavouriteService FavouriteService

<PageTitle>Biblioth√®que de Films</PageTitle>

<header class="header">
    <div class="logo">
        <a href="/" style="text-decoration: none; color: inherit;">
        <h1>üé• MyFilm</h1>
        </a>
    </div>
    <nav class="navigation">
         <ul class="nav-links">

        <li><a href="/">Accueil</a></li>
        <li><a href="/favorites">Favoris</a></li>
        <li><a href="/Allusers" class="active">Utilisateurs</a></li>
        <li><a href="/suggestions">Suggestions</a></li>
        <li><a href="/logout" id="btn2">Logout</a></li>
         </ul>
    </nav>
</header>

<section class="filters">
    <h2>Filtres</h2>
    <div class="filter-group">
        <label for="year">Ann√©e de sortie</label>
        <input type="number" id="year" @bind="SelectedYear" placeholder="Ann√©e (e.g., 2020)" class="filter-year" />
    </div>
    <div class="filter-group">
        <label for="genre">Genre</label>
        <select id="genre" @bind="SelectedGenre" class="filter-genre">
            <option value="">Tous les genres</option>
            @foreach (var genre in GenreList)
            {
                <option value="@genre">@genre</option>
            }
        </select>
    </div>
    <button id="btn3" @onclick="ResetFilters">R√©initialiser</button>
</section>

@if (IsLoading)
{
    <div class="loading">Chargement des films...</div>
}
else if (FilteredFilms == null || !FilteredFilms.Any())
{
    <p>Aucun film trouv√© dans la biblioth√®que.</p>
}
else
{
    <div class="film-grid">
        @foreach (var film in FilteredFilms)
        {
            <div class="film-card">
                <div class="card-front">
                <!-- Image du film -->
                <img src="@film.Poster" alt="@film.Name" class="film-poster" />
                </div>
                <div class="card-back">
                    <!-- Description du film -->
                    <h3>@film.Name</h3>
                    <p><strong>Year:</strong> @film.Year</p>
                    <p><strong>Genre:</strong> @(string.IsNullOrWhiteSpace(film.Genre) ? "Not specified" : film.Genre)</p>
                    <p class="plot"><strong>Plot:</strong> @film.Plot</p>
                    <p class="rating"><strong>IMDb Rating:</strong> @(string.IsNullOrWhiteSpace(film.ImdbRating) ? "N/A" : film.ImdbRating)</p>
                    <div class="film-rating">
                    <label for="rating-@film.Id">‚≠ê Note :</label>
                    <input type="number" id="rating-@film.Id" class="rating-input" min="1" max="5" step="1"@bind-value="FilmRatings[film.Id]" />
                    </div>
                    <button id="btn4" @onclick="() => AddToFavourites(film.Id)">
                        Ajouter aux favoris
                    </button>
                   @if(IsAdmin){
                    <button id="btn5" @onclick="() =>SupprimerFilm(film.Id) ">
                        SupprimerFilm
                    </button>
                   }
                </div>
            </div>
        }
    </div>
}

<footer class="footer">
    <p>&copy; 2025 MyFilm. Tous droits r√©serv√©s.</p>
    <div class="social-icons">
        <a href="#"><i class="fab fa-facebook"></i></a>
        <a href="#"><i class="fab fa-twitter"></i></a>
        <a href="#"><i class="fab fa-instagram"></i></a>
    </div>
</footer>

@code {
    private bool IsAdmin;
    private List<Film> FilmList = new();
    private int? SelectedYear; // Nullable to allow no filter initially
    private string SelectedGenre = ""; // Default to all genres
    private bool IsLoading = true;
    private Dictionary<int, int> FilmRatings = new(); // Holds user ratings for films

    private List<string> GenreList => FilmList
        .Where(f => !string.IsNullOrEmpty(f.Genre))
        .Select(f => f.Genre)
        .Distinct()
        .OrderBy(g => g)
        .ToList();

    private List<Film> FilteredFilms => FilmList
        .Where(f => (!SelectedYear.HasValue || f.Year == SelectedYear.ToString()) &&
                    (string.IsNullOrEmpty(SelectedGenre) || f.Genre == SelectedGenre))
        .ToList();
    private async Task<bool> IsUserInRoleAsync(string role)
    {
       var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string roleName = role.ToString(); // Convertir en cha√Æne
        return user.IsInRole(roleName);    // V√©rifie si l'utilisateur a ce r√¥le
    }
    protected override async Task OnInitializedAsync()
    {
        IsAdmin = await IsUserInRoleAsync("Admin");
        try
        {
            IsLoading = true;
            FilmList = await FilmService.GetFilmsAsync(); // Load all films

            // Initialize ratings dictionary
            foreach (var film in FilmList)
            {
                FilmRatings[film.Id] = 3; // Default rating
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }


    private void ResetFilters()
    {
        SelectedYear = null; // Clear the year filter
        SelectedGenre = "";  // Clear the genre filter
    }

    private async Task AddToFavourites(int filmId)
    {
        if (!FilmRatings.TryGetValue(filmId, out int rating) || rating < 1 || rating > 5)
        {
            Console.WriteLine("Invalid rating.");
            return;
        }

        try
        {
            var success = await FavouriteService.AddFavouriteAsync(filmId, rating);
            if (success)
            {
                Console.WriteLine($"Film {filmId} ajout√© aux favoris avec une note de {rating}.");
            }
            else
            {
                Console.WriteLine($"Erreur lors de l'ajout du film {filmId} aux favoris.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'ajout aux favoris : {ex.Message}");
        }
    }

    private async Task SupprimerFilm(int filmId)
    {
                try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
             if (user.Identity?.IsAuthenticated ?? false)
             {

                var success = await FilmService.SupprimerFilmAsync(filmId);
                if (success)
                {
                    Console.WriteLine($"Film {filmId} est Supprim√© des films .");
                    FilmService.NavigateTo("/films");
                }
             }
            else
            {
                Console.WriteLine($"Erreur lors de la suppression du film id : {filmId} .");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression des  : {ex.Message}");
        }

    }



}



<style>

body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background: linear-gradient(135deg, #2c3e50, #34495e);
    color: #ecf0f1;
}

@* .header {
    background: rgba(44, 62, 80, 0.8);
    backdrop-filter: blur(10px);
    padding: 10px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
} *@
@* 
.navigation a {
    margin: 0 15px;
    color: #ecf0f1;
    text-decoration: none;
}
.nav-links {
  display: flex;
  gap: 15px;
  list-style: none;
  padding: 0;
  margin: 0;
}
.nav-links li {
  position: relative;
}

.nav-links a {
  text-decoration: none;
  color: white;
  font-size: 1rem;
  padding: 10px 15px;
  transition: background 0.3s, color 0.3s;
}



.btn-secondary {
  background: #f87171;
  color: white;
}

.btn-secondary:hover {
  background: #ef4444;
} *@

/* --- Header --- */
/* Style g√©n√©ral du header */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 30px;
  background: #1e293b;
  color: white;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}
/* Liens de navigation */
.nav-links {
  display: flex;
  gap: 15px;
  list-style: none;
  padding: 0;
  margin: 0;
}

.nav-links li {
  position: relative;
}

.nav-links a {
  text-decoration: none;
  color: white;
  font-size: 1rem;
  padding: 10px 15px;
  transition: background 0.3s, color 0.3s;
}

.nav-links a:hover {
  background: #64748b;
  border-radius: 8px;
}

/* Boutons */

#btn2 {
  padding: 8px 15px;
  border-radius: 5px;
  font-weight: bold;
  transition: background 0.3s, color 0.3s;
  text-align: center;
}

#btn2 {
  background: #f87171;
  color: white;
}

#btn2:hover {
  background: #ef4444;
}




.filters {
    padding: 15px;
    background: linear-gradient(65deg, #54162b, #b4182d);
    margin: 20px;
    border-radius: 8px;
}
.filters h2 {
    font-size: 1.5rem;
    color: white;
    margin-bottom: 15px;
    
}

/* Groupes de filtres */
.filter-group {
    margin-bottom: 15px;
}

.filter-group label {
    display: block;
    font-size: 1rem;
    font-weight: bold;
    color: white;
    margin-bottom: 8px;
}

.filter-group input,
.filter-group select {
    width: 100%;
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 6px;
    background-color: #fff;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.filter-group input:focus,
.filter-group select:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    outline: none;
}

#btn3 {
  background: #007bff;
  color: white;
  font-size: 1rem; /* Taille du texte */
  font-weight: bold; /* Texte en gras */
  padding: 10px 20px; /* Espacement interne */
  border: none; /* Supprime les bordures */
  border-radius: 8px; /* Bordures arrondies */
  cursor: pointer; /* Curseur pointeur pour un bouton */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Ombre subtile */
  transition: background 0.3s ease, transform 0.2s ease; /* Transitions fluides */
}

#btn3:hover {
  background: #570ff1; /* Couleur survol */
  transform: scale(1.05); /* L√©g√®re mise en avant */
  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15); /* Ombre plus forte */
}

#btn3:active {
  background: #570ff1; /* Couleur enfonc√©e */
  transform: scale(0.98); /* L√©g√®re r√©duction pour effet de clic */
}




.film-grid {
    width: 100%; /* D√©finit une largeur maximale pour le conteneur */
    <!-- max-width: 1200px; /* Limite la largeur pour √©viter que les cartes ne deviennent trop espac√©es */ -->
    margin: 20px auto; /* Centrage horizontal du conteneur avec un peu d'espace en haut et en bas */
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); /* Cr√©e autant de colonnes que possible */
    gap: 20px; /* Espacement entre les cartes */
    padding: 20px; 
}

<!-- .film-card {
    background: #fff;
    color: #2c3e50;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s;
}

.film-card:hover {
    transform: scale(1.05);
} -->


.film-card {
    width: 300px; /* Largeur fixe */
    height: 400px; /* Hauteur fixe */
    position: relative;
    border-radius: 8px;
    transform-style: preserve-3d;
    transition: transform 0.6s;
}

.film-card:hover {
    transform: rotateY(180deg);
}

.card-front, .card-back {
    width: 100%;
    height: 100%;
    position: absolute;
    backface-visibility: hidden;
    border-radius: 8px;
    overflow: hidden;
}

.card-front {
    background-color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
}
.card img {
    width: 100%;
    height: auto;
    display: block;
}
.card-back {
    background-color: #1e2a38; /* Arri√®re-plan sombre pour contraste */
    color: #e0e0e0; /* Texte clair pour lisibilit√© */
    transform: rotateY(180deg);
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
}

.card-back {
    padding: 15px;
    text-align: center;
    color: #e0e0e0; /* Couleur l√©g√®rement gris√©e pour √©viter trop de contraste */
    font-family: 'Poppins', sans-serif;
}

.card-back h3 {
    font-size: 20px;
    font-weight: bold;
    color: #f8d210; /* Jaune pour le titre */
    margin-bottom: 5px;
}

.card-back p {
    font-size: 14px;
    color: #cbd5e1; /* Gris clair */
    margin-bottom: 6px;
}

.card-back .plot {
    font-size: 13px;
    font-style: italic;
    color: #9ca3af; /* Gris l√©g√®rement fonc√© */
    line-height: 1.4;
    max-height: 70px; /* Emp√™che d'avoir un texte trop long */
    overflow: hidden;
    text-overflow: ellipsis;
}

.card-back .rating {
    font-size: 14px;
    font-weight: bold;
    color: #f87171; /* Rouge pour le rating */
    margin-top: 5px;
}
.footer {
    padding: 10px;
    text-align: center;
    background: #2c3e50;
}

.card-back .film-rating {
    text-align: center;
    font-family: 'Poppins', sans-serif;
    font-size: 16px;
    font-weight: bold;
    color: #f8d210; /* Jaune dor√© */
    margin-bottom: 10px;
    padding: 10px 20px;
}

.card-back .rating-input {
    width: 60px;
    padding: 5px;
    font-size: 14px;
    text-align: center;
    border: 2px solid #f8d210; /* Bordure jaune */
    border-radius: 5px;
    background-color: #1e2a38;
    color: white;
}


#btn4 {
  background: #09d635;
  color: white;
  font-size: 1rem; /* Taille du texte */
  font-weight: bold; /* Texte en gras */
  padding: 10px 20px; /* Espacement interne */
  border: none; /* Supprime les bordures */
  border-radius: 8px; /* Bordures arrondies */
  cursor: pointer; /* Curseur pointeur pour un bouton */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Ombre subtile */
  transition: background 0.3s ease, transform 0.2s ease; /* Transitions fluides */
}

#btn4:hover {
  background: #11b00b; /* Couleur survol */
  transform: scale(1.05); /* L√©g√®re mise en avant */
  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15); /* Ombre plus forte */
}

#btn4:active {
  background: #11b00b; /* Couleur enfonc√©e */
  transform: scale(0.98); /* L√©g√®re r√©duction pour effet de clic */
}




#btn5 {
  margin-top:10px;
  background: #c60909;
  color: white;
  font-size: 1rem; /* Taille du texte */
  font-weight: bold; /* Texte en gras */
  padding: 10px 20px; /* Espacement interne */
  border: none; /* Supprime les bordures */
  border-radius: 8px; /* Bordures arrondies */
  cursor: pointer; /* Curseur pointeur pour un bouton */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Ombre subtile */
  transition: background 0.3s ease, transform 0.2s ease; /* Transitions fluides */
}

#btn5:hover {
  background: #c60909; /* Couleur survol */
  transform: scale(1.05); /* L√©g√®re mise en avant */
  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15); /* Ombre plus forte */
}

#btn5:active {
  background: #c60909; /* Couleur enfonc√©e */
  transform: scale(0.98); /* L√©g√®re r√©duction pour effet de clic */
}





</style>

